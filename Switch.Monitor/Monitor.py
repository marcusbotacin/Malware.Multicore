# MultiCore malware project
# Branch Monitor parser
# identifies core switches
# Marcus Botacin - 2017
# Federal University of Parana (UFPR)

import time                                     # wait for data
import signal                                   # interrupt endless loop
import win32file as w                           # use windows API
import sys #binary name as argument

# monitor class
class Monitor():
        # on creation
        def __init__(self):
                # no previous data
                self.previous=None
                # debug print
                print("Monitor Started")

        # monitoring routine
        def loop(self,PID):
                # debug print
                print("Looping")
                # get handle
                self.__open_driver_handler()
                # set PID to be monitored
                self.__write_driver(PID)
                # continuously loop
                while(1):
                        # get data -- running core
                        core = self.__get_branch_data()
                        # having data
                        if core:
                                # first entry
                                if self.previous is None:
                                        print("Started at core: %s" % core)
                                # core switch
                                elif self.previous != core:
                                        print("Switched from core: %s to core: %s" % (self.previous,core))
                                # update last core
                                self.previous=core
                self.__close_driver_handler()

        # get branch data from driver
        def __get_branch_data(self):
                # size, data
                tam,string = w.ReadFile(self.hdevice,200,None)
                # no data, size is zero
                if len(string)==0:
                    return None
                # having data
                else:
                        # branch data as hex data
                        core=int(string[16:23][::-1].encode('hex'),16)
                        # return current core
                        return core

        # write pid
        def __write_driver(self,PID):
                w.WriteFile(self.hdevice,PID)

        # open driver handle
        def __open_driver_handler(self):
                self.hdevice=w.CreateFile("\\\\.\\BranchMonitor",0x80000000|0x40000000,0,None,3,0x00000080,None)

        # close driver handle
        def __close_driver_handler(self):
                w.CloseHandle(self.hdevice)

# No module import allowed yet
if __name__ == "__main__":
	# checked PId passed as argument
	if(len(sys.argv)==2):
                # instantiate
                m = Monitor()
                # and monitor
                m.loop(sys.argv[1])
	else:
                print("No PID supplied")
else:
        print("No module import support yet!")
