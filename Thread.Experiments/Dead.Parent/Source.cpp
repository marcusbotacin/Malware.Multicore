/* Multi-Core malware
 * Thread Experiments
 * Thread and process termination experiment
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* Include block */
#include <stdio.h>
#include <Windows.h>

/* attach to given core */
void attach_to_core(int core)
{
	HANDLE proc = GetCurrentProcess();
	SetProcessAffinityMask(proc,1<<core);
}

/* how many runs -- instead of infinite loop */
#define MAX_RUNS 10
/* Sleep */
#define SLEEP_TIME 1000

/* Thread */
DWORD WINAPI T( LPVOID lpParam )
{
	printf("Thread Started\n");
	/* run some time */
	for(int runs=0;runs<MAX_RUNS;runs++)
	{
		/* print thread and process ids */
		printf("[%x] Thread Parent: %x\n",GetCurrentThreadId(),GetCurrentProcessId());
		Sleep(SLEEP_TIME);
	}
	printf("Thread Exiting\n");
	return 0;
}


int main()
{
	HANDLE thread;
	DWORD tid;

	/* Process Id */
	printf("[Parent %x] Creating Thread\n",GetCurrentProcessId());
	/* Create Thread */
	thread=CreateThread(NULL,0,T,NULL,0,&tid);
	/* Thread Id */
	printf("[Parent %x] Created Thread %x\n",GetCurrentProcessId(),tid);
	WaitForSingleObject(thread,INFINITE);
	printf("[Parent %x] Exiting\n",GetCurrentProcessId());
	return 0;
}